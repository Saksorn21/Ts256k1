ฉันจะใช้lib 
-@noble/ciphers
-@noble/hashes
 -@noble/secp256k1
ในการเขียนโปรเจคนี้ คุณมีข้อแนะนำเพิ่มเติมไหม
ฉันจะใช้ class สะเป็นส่วนใหญ่ คุณช่วยลิสtodo ในสิ่งที่ต้องทำหน่อย
src/
lib/
-class-
-PrivateKey 
-Publickey 
-encrypted
-decrypted
utils/
—utils.ts—
-hexToBytes
-bytesToHex
-base64ToBytes
-bytesToBase64
-remove0x
-encoded(encode…) Buffer
-decoded(decode..) Buffer
-isValidPrivateKey
-randomBytes



นี่คือรายการ **TODO** ที่จะช่วยคุณจัดการโปรเจกต์ตามโครงสร้างที่คุณได้วางแผนไว้:

### 1. **ตั้งค่าโครงสร้างโปรเจกต์**
   - **สร้างโฟลเดอร์**:
     - `src/`: เก็บโค้ดหลัก
     - `lib/`: เก็บคลาสและฟังก์ชันการทำงานหลัก
     - `utils/`: เก็บฟังก์ชันช่วยเหลือ เช่น การเข้ารหัสและแปลงข้อมูล

### 2. **ติดตั้ง dependencies**
   - ติดตั้งไลบรารีที่จำเป็น:
     ```bash
     npm install @noble/ciphers @noble/hashes @noble/secp256k1
     ```

### 3. **สร้างไฟล์และคลาสใน `lib/`**
   - **PrivateKey**:
     - สร้างฟังก์ชันสำหรับสร้างคีย์ส่วนตัว (ใช้ `@noble/secp256k1`)
     - ตรวจสอบความถูกต้องของคีย์ (`isValidPrivateKey`)
     - ฟังก์ชันแปลงคีย์ส่วนตัวเป็นคีย์สาธารณะ
   - **PublicKey**:
     - สร้างฟังก์ชันแปลงจากคีย์ส่วนตัวเป็นคีย์สาธารณะ
     - จัดการกับการเข้ารหัสและการลงนาม
   - **Encrypted**:
     - ใช้ `@noble/ciphers` สำหรับการเข้ารหัส
     - จัดเก็บฟังก์ชันสำหรับการเข้ารหัสข้อมูล
   - **Decrypted**:
     - ใช้ `@noble/ciphers` สำหรับการถอดรหัสข้อมูล

### 4. **สร้างฟังก์ชันช่วยเหลือใน `utils/`**
   - **`hexToBytes` และ `bytesToHex`**: แปลงระหว่าง hexadecimal และ byte array
   - **`base64ToBytes` และ `bytesToBase64`**: แปลงระหว่าง base64 และ byte array
   - **`remove0x`**: ลบ "0x" ที่นำหน้าจาก hexadecimal
   - **ฟังก์ชันการเข้ารหัส/ถอดรหัส**:
     - `encoded(encode…)`: จัดการแปลงข้อมูลเป็น buffer สำหรับการเข้ารหัส
     - `decoded(decode…)`: แปลง buffer กลับเป็นข้อมูลดิบหลังถอดรหัส
   - **`isValidPrivateKey`**: ตรวจสอบว่าคีย์ส่วนตัวนั้นถูกต้อง
   - **`randomBytes`**: สร้าง byte array ที่มีขนาดสุ่มสำหรับใช้ในกระบวนการเข้ารหัส

### 5. **ตั้งค่าการคอมไพล์ TypeScript**
   - ตรวจสอบให้แน่ใจว่าได้ตั้งค่า `tsconfig.json` ให้เหมาะสม:
     - ใช้ `target` ที่รองรับ ES2022
     - เปิด `esModuleInterop` และ `strict`

### 6. **ทดสอบไลบรารี**
   - สร้างโฟลเดอร์ `test/` และเขียนการทดสอบสำหรับแต่ละฟังก์ชันในคลาสต่างๆ โดยใช้เครื่องมือทดสอบเช่น `jest` หรือ `mocha`:
     - ทดสอบการสร้างและตรวจสอบคีย์
     - ทดสอบการเข้ารหัส/ถอดรหัสข้อมูล
     - ทดสอบฟังก์ชันช่วยเหลือใน `utils/`

### 7. **เพิ่มเอกสารประกอบ**
   - สร้างไฟล์ `README.md` เพื่ออธิบายการใช้งานไลบรารีและฟังก์ชันต่างๆ
   - เพิ่มเอกสารประกอบในไฟล์ `tsdoc` เพื่อช่วยให้ผู้ใช้เข้าใจการทำงานของโค้ดแต่ละส่วน